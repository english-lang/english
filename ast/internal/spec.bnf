
!whitespace
: ' '
| '\t'
| '\r'
| '\n'
;

// --- [ Identifiers ] 
identifier 	
: _letter { _letter | _decimalDigit } 
;

// --- [ Letters and digits ]

_letter       	
: _unicodeLetter 
| '_' 
| '-'
;

_unicodeLetter 	
: 'a' - 'z' 
| 'A' - 'Z' 
;

_decimalDigit  	
: '0' - '9' 
;

_octalDigit
: '0' - '7' 
;

_hexDigit      	
: _decimalDigit 
| 'a' - 'f' 
| 'A' - 'F' 
;

tagNN
: '<' 'N' 'N' '>'
;

tagNNP
: '<' 'N' 'N' 'P' '>'
;

tagVBZ
: '<' 'V' 'B' 'Z' '>'
;

tagDT
: '<' 'D' 'T' '>'
;

tagPeriod
: '<' '.' '>'
;

// === [ Grammar part] 

<< import "github.com/english-lang/english/ast/internal" >>


DeclarativeSentence
: NNPWord VBZWord DTWord NNWord PeriodWord << internal.NewSentence("DeclarativeSentence",$0,$1,$2,$3,$4), nil >>
;

NNWord
: Word tagNN << internal.NewWord($0,"NN"), nil >>
;

NNPWord
: Word tagNNP << internal.NewWord($0,"NNP"), nil >>
;

DTWord
: Word tagDT << internal.NewWord($0,"DT"), nil >>
;

VBZWord
: Word tagVBZ << internal.NewWord($0,"VBZ"), nil >>
;

PeriodWord
: "." tagPeriod << internal.NewWord($0,"."), nil >>
;

Word
: identifier
;
